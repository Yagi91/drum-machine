{"version":3,"sources":["components/drum-machine.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["bankOne","keyCode","keyTrigger","id","url","DrumMachine","props","handleKeyPress","e","i","length","playAudio","state","playing","String","fromCharCode","power","volume","playRef","React","createRef","bind","handleVolume","clearPlaying","val","this","current","src","play","setState","source","document","addEventListener","removeEventListener","target","value","Math","round","setTimeout","className","ref","map","audioArr","KeyID","DisplayAudio","currentAudio","for","class","type","min","max","step","onChange","PowerButton","turnOn","turnOff","Component","ButtonPlayer","keyID","onClick","style","cursor","App","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29eff75e.chunk.js","sourcesContent":["import React from \"react\";\r\n// import long from \"./long.mp3\";\r\n\r\nconst bankOne = [\r\n  {\r\n    keyCode: 81,\r\n    keyTrigger: \"Q\",\r\n    id: \"Heater-1\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 87,\r\n    keyTrigger: \"W\",\r\n    id: \"Heater-2\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\",\r\n  },\r\n  {\r\n    keyCode: 69,\r\n    keyTrigger: \"E\",\r\n    id: \"Heater-3\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3\",\r\n  },\r\n  {\r\n    keyCode: 65,\r\n    keyTrigger: \"A\",\r\n    id: \"Heater-4\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 83,\r\n    keyTrigger: \"S\",\r\n    id: \"Clap\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3\",\r\n  },\r\n  {\r\n    keyCode: 68,\r\n    keyTrigger: \"D\",\r\n    id: \"Open-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3\",\r\n  },\r\n  {\r\n    keyCode: 90,\r\n    keyTrigger: \"Z\",\r\n    id: \"Kick-n'-Hat\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3\",\r\n  },\r\n  {\r\n    keyCode: 88,\r\n    keyTrigger: \"X\",\r\n    id: \"Kick\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 67,\r\n    keyTrigger: \"C\",\r\n    id: \"Closed-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3\",\r\n  },\r\n];\r\n\r\nconst bankTwo = [\r\n  {\r\n    keyCode: 81,\r\n    keyTrigger: \"Q\",\r\n    id: \"Chord-1\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 87,\r\n    keyTrigger: \"W\",\r\n    id: \"Chord-2\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\",\r\n  },\r\n  {\r\n    keyCode: 69,\r\n    keyTrigger: \"E\",\r\n    id: \"Chord-3\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\",\r\n  },\r\n  {\r\n    keyCode: 65,\r\n    keyTrigger: \"A\",\r\n    id: \"Shaker\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\",\r\n  },\r\n  {\r\n    keyCode: 83,\r\n    keyTrigger: \"S\",\r\n    id: \"Open-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\",\r\n  },\r\n  {\r\n    keyCode: 68,\r\n    keyTrigger: \"D\",\r\n    id: \"Closed-HH\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 90,\r\n    keyTrigger: \"Z\",\r\n    id: \"Punchy-Kick\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 88,\r\n    keyTrigger: \"X\",\r\n    id: \"Side-Stick\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\",\r\n  },\r\n  {\r\n    keyCode: 67,\r\n    keyTrigger: \"C\",\r\n    id: \"Snare\",\r\n    url: \"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\",\r\n  },\r\n];\r\nclass DrumMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      playing: String.fromCharCode(160),\r\n      power: true,\r\n      volume: 5,\r\n    };\r\n    this.playRef = React.createRef();\r\n    this.playAudio = this.playAudio.bind(this);\r\n    this.power = this.power.bind(this);\r\n    this.handleVolume = this.handleVolume.bind(this);\r\n    this.clearPlaying = this.clearPlaying.bind(this);\r\n  }\r\n  playAudio(val) {\r\n    if (this.state.power === true) {\r\n      this.playRef.current.src = val.url;\r\n      this.playRef.current.play();\r\n      this.setState({\r\n        playing: val.id,\r\n        source: val.url,\r\n      });\r\n    } else {\r\n      return;\r\n      // this.playRef.current.src = \"\";\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n  componentDidUpdate() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress.bind(this));\r\n  }\r\n  handleKeyPress = (e) => {\r\n    for (let i = 0; i < bankOne.length; i++) {\r\n      if (e.keyCode === bankOne[i].keyCode) {\r\n        this.playAudio(bankOne[i]);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n  power() {\r\n    this.setState((state) => {\r\n      return { power: !state.power, playing: String.fromCharCode(160) };\r\n    });\r\n  }\r\n  handleVolume(e) {\r\n    this.playRef.current.volume = e.target.value;\r\n    if (this.state.power) {\r\n      this.setState({\r\n        volume: e.target.value,\r\n        playing: `Volume ${Math.round(e.target.value * 100)}`,\r\n      });\r\n      setTimeout(this.clearPlaying, 1000);\r\n    }\r\n  }\r\n  clearPlaying() {\r\n    this.setState({ playing: String.fromCharCode(160) });\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"drum-machine\" className=\"container-fluid \">\r\n        <audio id=\"audio\" ref={this.playRef} />\r\n        <div className=\"row border container\">\r\n          <div className=\"row border py-1 col-3\">\r\n            {bankOne.map((val, i, audioArr) => {\r\n              return (\r\n                <ButtonPlayer\r\n                  key={i}\r\n                  KeyID={val.id}\r\n                  playAudio={() => this.playAudio(val)}\r\n                  keyTrigger={val.keyTrigger}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"col-2 \">\r\n            <DisplayAudio currentAudio={this.state.playing} />\r\n            <div>\r\n              <label for=\"customRange2\" class=\"form-label h5\">\r\n                Volume Slider\r\n              </label>\r\n              <input\r\n                type=\"range\"\r\n                class=\"form-range\"\r\n                min=\"0\"\r\n                max=\"1\"\r\n                step=\"0.01\"\r\n                value={this.state.volume}\r\n                onChange={this.handleVolume}\r\n              />\r\n            </div>\r\n            <PowerButton\r\n              power={this.power}\r\n              turnOn={this.state.power ? \"bg-success\" : \"bg-white\"}\r\n              turnOff={!this.state.power ? \"bg-danger\" : \"bg-white\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass ButtonPlayer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"drum-pad bg-primary py-4 px-1 text-center rounded shadow col-4 border\"\r\n        id={this.props.keyID}\r\n        onClick={this.props.playAudio}\r\n        style={{ cursor: \"pointer\" }}\r\n      >\r\n        {this.props.keyTrigger}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction DisplayAudio(props) {\r\n  return (\r\n    <div className=\"bg-dark text-white text-center shadow\">\r\n      <div>{props.currentAudio}</div>\r\n    </div>\r\n  );\r\n}\r\nfunction PowerButton(props) {\r\n  return (\r\n    <div\r\n      className={`power-button p-1 rounded d-inline-flex border shadow`}\r\n      onClick={props.power}\r\n      style={{ cursor: \"pointer\" }}\r\n    >\r\n      <div className={`text-center ${props.turnOn} p-2`}>\r\n        {String.fromCharCode(160)}ON\r\n      </div>\r\n      <div className={`text-center ${props.turnOff} p-2 `}>\r\n        {String.fromCharCode(160)}OFF\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n// const DrumMachine = (props) => {\r\n//   return (\r\n//     <div>\r\n//       <p>Hello</p>\r\n//     </div>\r\n//   );\r\n// };\r\n// onClick={() => this.playAudio(this.props.keyTrigger)}\r\nexport default DrumMachine;\r\n","import React from \"react\";\nimport DrumMachine from \"./components/drum-machine\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>You can press the keys on the keyboard to play Audio</div>\n      <DrumMachine />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\n// import counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    // counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}